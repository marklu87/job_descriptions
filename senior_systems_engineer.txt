Sr. Systems Engineer
We are looking for a seasoned systems person. We are building an AI platform with the assumption that our compute environments are getting more dense and more heterogeneous. If you are excited by the challenge of building a platform that trains and runs hundreds of AI services in a multi-cluster environment, this role is for you.
Our stack is built on Cloud Native components such as Kubernetes, Envoy, gRPC, and Jaeger. We take microservices to the heart, and everything we do is scalable from day one. We run in the highest compute environments available in the market. Currently, we run in a cluster of DGXs from NVIDIA. We are an AI-first company and we believe that “data writes software”. To that end, we instrument everything we can in our platform. We crunch this data so that it helps the Systems Engineer in you make a better system.
Our team is a mix of skill sets: folks with a Systems background, folks with a Deep Learning background, and folks who know a little bit of everything enterprise. We value being a top-notch organization with a strong engineering-driven culture, and have the same high standards with our code, systems, and people. We value learning and growth (while not being bored) and hire diverse, well-rounded, communicative people that support our culture of trust and friendship.

More About the Job
Provide on-demand addressing and routing capabilities for large data messages across a multi-node cluster of a dense compute environment. We make the assumption that the bandwidth between nodes within a cluster is increasing.
Extend the above to include a cluster of clusters across the public internet backbone.
Identify and use external services wherever they make sense; we want to hack existing tools for our purposes rather than build everything in-house!

You Have
Led a team to implement a system that you are proud of for its sheer scale in compute.
Experience with routing in high-bandwidth environments (e.g., NVLINK)
Experimented with networking shenanigans that could be very powerful if done correctly (e.g., code injection through proxies).
Some DevOps experience to be sufficiently independent for prototyping
A background and experience in systems engineering. For example, a Computer Science degree (or comparable) and several years’ working experience in systems.

Bonus Points
You have used NVLink and/or NVSwtich.
You have worked on Machine Learning projects before.
You have familiarity with the architecture of cloud providers.

You Are
Emotionally mature & humble. You care about being effective over being right. Ideally, you’ve made major changes & decisions in your life and have learned from the results.
Communicative & empathetic. You are happy when helping others succeed. You are an open-minded learner and live to learn new things, like staying up to date on new technologies, tools, and techniques. You are inspired by what's possible, as well as what people inside and outside your organization know and are eager to incorporate the best into your work.
Someone with extremely high standards. You’re practical and know perfect is the enemy of good, but you aspire for us to be great.
An owner. You feel personally accountable and responsible, and know seeing the problem is less than half of it. You look for problems and inefficiencies, and find elegant solutions to them before they become major issues
Fast-paced. You love the speed of startups and and the impact you can make. Conversely, you never, ever want to be a tiny cog in a gigantic machine.
An advocate for the end user. You think about how our customers will interact with the service, and champion positive changes.
A systems thinker. You think about how your designs will affect other aspects of the service and how it will evolve in the future.

Apply
If this all sounds exciting, please shoot us an email at [eacharya]@[projectlucy].[dev] - without of course the brackets. We are a rapidly growing team - so if this is not exactly what you are looking for, drop us a line anyway!

Key Words
Kubernetes, Docker, protobuf, gRPC, Service Mesh, Lambda functions, zero-copy, micro-service architecture